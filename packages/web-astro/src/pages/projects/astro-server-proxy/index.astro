---
import Layout from "../../../layouts/Layout.astro";
import { isAllowedDomain, getDomainFromUrl } from "../../../config/allowedDomains";
import { getRelativePath } from "../../../utils/path";

// 获取绝对路径
function getAbsolutePath(from: string, to: string): string {
  const relativePath = getRelativePath(from, to);
  const baseUrl = Astro.url.origin;
  return new URL(relativePath, new URL(from, baseUrl)).pathname;
}

// 获取目标 URL 的函数，从 URL 参数中获取
function getTargetUrl(request: Request) {
  try {
    // 从 URL 参数中获取
    const url = new URL(request.url);
    const urlParam = url.searchParams.get("url");
    if (urlParam) {
      const decodedUrl = decodeURIComponent(urlParam);
      if (isAllowedDomain(decodedUrl)) {
        return {
          url: decodedUrl,
          domain: getDomainFromUrl(decodedUrl),
        };
      }
    }
  } catch (e) {
    console.error("Error parsing URL:", e);
  }
  return null;
}

const urlInfo = getTargetUrl(Astro.request);
---

<Layout
  title={urlInfo
    ? `${urlInfo.domain} - 服务器代理 - Home 2025`
    : "服务器代理 - Home 2025"}
>
  <div class="min-h-screen bg-gradient-to-b from-gray-50 to-white dark:from-gray-900 dark:to-gray-800">
    <div class="max-w-7xl mx-auto py-4 px-4 sm:px-6 lg:px-8">
      <div class="bg-white dark:bg-gray-800 rounded-xl shadow-lg overflow-hidden">
        <div class="p-4 border-b border-gray-200 dark:border-gray-700 flex items-center justify-between">
          <div class="flex items-center space-x-4">
            <a
              href={getAbsolutePath(Astro.url.pathname, "/projects")}
              class="text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white"
            >
              <svg
                class="w-6 h-6"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
              </svg>
            </a>
            <h1
              class="text-xl font-semibold text-gray-900 dark:text-white truncate"
              id="domain-title"
            >
              {urlInfo ? urlInfo.domain : "服务器代理"}
            </h1>
          </div>
          {urlInfo && (
            <a
              href={urlInfo.url}
              target="_blank"
              rel="noopener noreferrer"
              class="text-indigo-600 dark:text-indigo-400 hover:text-indigo-700 dark:hover:text-indigo-300"
              id="open-new-tab"
            >
              <span class="sr-only">在新窗口打开</span>
              <svg
                class="w-6 h-6"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"
                ></path>
              </svg>
            </a>
          )}
        </div>
        <div class="relative w-full" style="height: calc(100vh - 120px);">
          {urlInfo ? (
            <div class="absolute inset-0 w-full h-full px-2 py-2 overflow-auto" id="proxy-content">
              <div id="loading" class="flex items-center justify-center h-full">
                <div class="text-center">
                  <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-500"></div>
                  <p class="mt-4 text-gray-600 dark:text-gray-400">正在加载...</p>
                </div>
              </div>
            </div>
          ) : (
            <div class="flex items-center justify-center h-full">
              <div class="text-center p-8">
                <h2 class="text-2xl font-bold text-gray-900 dark:text-white mb-4">
                  请提供要代理的 URL
                </h2>
                <p class="text-gray-600 dark:text-gray-400 mb-6">
                  您可以通过以下方式提供 URL：
                </p>
                <ul class="text-left text-gray-600 dark:text-gray-400 mb-6 space-y-2">
                  <li>• Query 参数方式：<code class="bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded">/projects/astro-server-proxy/?url=https://example.com</code></li>
                  <li>• 路径参数方式：<code class="bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded">/projects/astro-server-proxy/https://example.com</code></li>
                  <li>• Hash 方式：<code class="bg-gray-100 dark:bg-gray-700 px-2 py-1 rounded">/projects/astro-server-proxy/#https://example.com</code></li>
                </ul>
                <a
                  href={getAbsolutePath(Astro.url.pathname, "/projects/proxy-panel")}
                  class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                >
                  前往代理面板
                </a>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  // 从 URL 中获取域名
  function getDomainFromUrl(url: string): string {
    try {
      return new URL(url).hostname;
    } catch (e) {
      console.error("Invalid URL:", e);
      return "";
    }
  }

  // 获取相对路径的函数
  function getRelativePath(from: string, to: string): string {
    // 移除开头的斜杠
    from = from.replace(/^\//, '');
    to = to.replace(/^\//, '');
    
    // 分割路径
    const fromParts = from.split('/').filter(Boolean);
    const toParts = to.split('/').filter(Boolean);
    
    // 计算共同前缀长度
    let i = 0;
    while (i < fromParts.length && i < toParts.length && fromParts[i] === toParts[i]) {
        i++;
    }
    
    // 构建相对路径
    const upCount = fromParts.length - i - 1; // 减 1 是因为当前页面名称不计入
    const relativePath = upCount > 0 
        ? Array(upCount).fill('..').join('/') + '/' + toParts.slice(i).join('/')
        : './' + toParts.slice(i).join('/');
        
    return relativePath || './';
  }
  
  // 获取绝对路径的函数
  function getAbsolutePath(from: string, to: string): string {
    const relativePath = getRelativePath(from, to);
    const baseUrl = window.location.origin;
    return new URL(relativePath, new URL(from, baseUrl)).pathname;
  }

  // 加载并显示内容
  async function loadContent(url: string) {
    try {
      const proxyContent = document.getElementById('proxy-content');
      if (!proxyContent) return;

      // 显示加载状态
      proxyContent.innerHTML = `
        <div class="flex items-center justify-center h-full">
          <div class="text-center">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-500"></div>
            <p class="mt-4 text-gray-600 dark:text-gray-400">正在加载...</p>
          </div>
        </div>
      `;

      // 使用 CORS 代理服务
      const corsProxyUrl = `https://cors-www.lilnong.top/${url}`;
      
      try {
        const response = await fetch(corsProxyUrl);
        const contentType = response.headers.get('content-type');
        
        if (contentType?.includes('text/html')) {
          const html = await response.text();
          proxyContent.innerHTML = `
            <iframe
              srcdoc="${html.replace(/"/g, '&quot;')}"
              class="w-full h-full border-0"
              sandbox="allow-scripts allow-same-origin allow-forms"
              loading="lazy"
            ></iframe>
          `;
        } else {
          // 对于非 HTML 内容，直接在新窗口打开
          window.open(corsProxyUrl, '_blank');
          proxyContent.innerHTML = `
            <div class="flex items-center justify-center h-full">
              <div class="text-center">
                <p class="text-gray-600 dark:text-gray-400">
                  此类型的内容已在新窗口中打开
                </p>
              </div>
            </div>
          `;
        }
      } catch (error) {
        proxyContent.innerHTML = `
          <div class="flex items-center justify-center h-full">
            <div class="text-center">
              <p class="text-red-600 dark:text-red-400">
                加载失败：${error.message}
              </p>
            </div>
          </div>
        `;
      }
    } catch (e) {
      console.error("Error loading content:", e);
    }
  }

  // 检查是否需要处理 hash
  document.addEventListener("DOMContentLoaded", () => {
    // 检查当前 URL 参数
    const urlParam = new URLSearchParams(window.location.search).get('url');
    if (urlParam) {
      loadContent(urlParam);
    }
    // 检查 hash
    else if (window.location.hash) {
      const url = decodeURIComponent(window.location.hash.slice(1));
      loadContent(url);
    }
  });

  // 监听 hash 变化
  window.addEventListener("hashchange", () => {
    if (window.location.hash) {
      const url = decodeURIComponent(window.location.hash.slice(1));
      loadContent(url);
    }
  });
</script>

<style>
  iframe {
    background: transparent;
  }
</style> 